class CTPN(nn.Module):
    def __init__(self):
        super(CTPN, self).__init__()
        self.cnn = nn.Sequential()
        self.cnn.add_module( 'VGG_16', V66_16())
        self.rnn = nn.Sequential()
        self.rnn.add_module( 'im2col', img2col.Im2col( (3, 3),  (1, 1),  (1, 1)))
        self.rnn.add_module( 'blstm', BLSTM(3 * 3 * 512,  128))
        self.FC = nn.Conv2d( 256,  512,  1)
        self.vertical_coordinate = nn.Conv2d( 512, 2 * 10,  1)
        self.score = nn.Conv2d( 512, 2 * 10,  1)
        self.side_refinement = nn.Conv2d( 512,  10,  1)
    def forward(self, x, val=False):
        x = self.cnn(x)
        x = self.rnn(x)
        x = self.FC(x)
        x = F.relu(x, inplace=True)
        vertical_pred = self.vertical_coordinate(x)
        score = self.score(x)
        if val:
            score = score.reshape((score.shape[0], 10, 2, score.shape[2], score.shape[3]))
            score = score.squeeze(0)
            score = score.transpose(1, 2)
            score = score.transpose(2, 3)
            score = score.reshape((-1, 2))
            #score = F.softmax(score, dim=1)
            score = score.reshape((10, vertical_pred.shape[2], -1, 2))
            vertical_pred = vertical_pred.reshape((vertical_pred.shape[0], 10, 2, vertical_pred.shape[2],
                vertical_pred.shape[3]))
            vertical_pred = vertical_pred.squeeze(0)
        side_refinement = self.side_refinement(x)
        return vertical_pred, score, side_refinement
